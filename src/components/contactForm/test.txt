          <Form className="contact__form">
          <FormGroup className="contact__form__formgroup">
            <Label for="somename">Name<span className="contact__form__asterisk">*</span></Label>
            <Input type="text" name="name" id="somename" pattern=".{2,20}" title="from 2 to 20 symbols"  
            required/>
          </FormGroup>
          <FormGroup className="contact__form__formgroup">
            <Label for="some">Email<span className="contact__form__asterisk">*</span></Label>
            <Input type="email" name="email" id="someemail" 
            required/>
          </FormGroup>
          <FormGroup className="contact__form__formgroup">
            <Label for="somephone">Phone</Label>
            <Input type="tel" name="phone" id="somephone" placeholder="+7(___)___-__-__" 
            pattern="\+7(\s+)?-[0-9]{3}-[0-9]{3}-[0-9]{2}-[0-9]{2}" title="The number must be like +7-999-999-99-99"
            />
          </FormGroup>
          <FormGroup className="contact__form__formgroup">
          <div className="contact__form__formgroup__4">
            <Label for="somemessage">Your message<span className="contact__form__asterisk">*</span></Label>
            <Input type="textarea" name="message" id="somemessage" placeholder="Tell us..." 
            required/>
          </div>
          </FormGroup>
          <Button type="submit" onClick={this.changeForm}>Send us</Button>
          </Form>





              const FormikApp = withFormik({
      mapPropsToValues({ name, email, phone, message}) {
        return {
          email: email || '',
          name: name || '',
          phone: phone || '',
          message: message || ''
        }
      },
      validationSchema: Yup.object().shape({
        email: Yup.string().email('Enter the proper email').required('Email is required'),
        name: Yup.string().min(2, 'Name must be at least 2 symbols').max(20, 'The name is too long, sorry').required('Name is required'),
        message: Yup.string().required('Message is requred'),
        phone: Yup.string().matches(phoneRegExp, 'Phon—É number must be like +7-999-999-99-99')
      }),
      async handleSubmit(values, {resetForm, setErrors, setSubmitting}) {
        if (values.email === 'thisemailistaken@test.io') {
          setErrors({ email: 'This email is already taken'})
        } else {
          this.setState({sent: !this.state.sent})
          resetForm();
        }
        setSubmitting(false)
      }
    })(MainForm);